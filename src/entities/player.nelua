-- nene
local Nene = require 'nene'
local Vec2 = require 'nene.math.vec2'
local AnimationRange = require 'nene.animation'

-- rotor
local entity = require 'rotor.entity'
local derived_entity = require 'rotor.derived_entity'
local storage = require 'rotor.storage'
local component = require 'rotor.component'
local GenIdx = require 'rotor.gen_idx'

-- irene
local EntityData = require 'irene.components.entity_data'
local Position = require 'irene.components.position'
local Collider = require 'irene.components.collider'
local Sprite = require 'irene.components.sprite'
local Painter = require 'irene.components.painter'
local Velocity = require 'irene.components.velocity'

-- game
local EntityMask = require 'entities.mask'
local Layer = require 'entities.layer'
local MovableEntity = require 'entities.movable_entity'
local Resources = require 'res'

-- player namespace
local player = @record{}

-- ball sub-entity
local Ball <nickname 'Ball'> = @entity(record{
  position: Position,
  painter: Painter,
  sprite: Sprite,
})

-- player component
local player.Component <nickname 'player.Component'> = @component(record{
  mov_speed: number,
})

-- player entity
local player.Entity <nickname 'player.Entity'> = @derived_entity(MovableEntity, record{
  player_comp: player.Component,
  ball: Ball,
})

local player.storage: storage(player.Entity, 1)

local idle_animation: AnimationRange = { fps = (1000 / 300), from = 0, to = 1, loop = true, }
local run_animation : AnimationRange = { fps = (1000 / 100), from = 2, to = 3, loop = true, }

local MIN_X <comptime>, MAX_X <comptime> = 64, 250

function player.Entity:flip()
  self.sprite.flip_h = not self.sprite.flip_h
  if self.sprite.flip_h then
    self.ball.position.local_pos.x = -22
    self.collider.hitbox.x = -19
  else
    self.collider.hitbox.x = 11
    self.ball.position.local_pos.x = 8
  end
end

function player.Entity.init(pos: Vec2): player.Entity
  local player: player.Entity;

  MovableEntity.derived_init(&player, {
    basic_entity = {
      entity_data = {
        mask = EntityMask.Player
      },

      position = {
        local_pos = pos,
      },

      collider = {
        hitbox = { 11, -6 , 25, 22 },
      },

      sprite = {
        spritesheet = Resources.res.player,
        current_animation = idle_animation,
      },
    }
  })

  player.player_comp = {
    mov_speed = 16*9,
  }

  player.sprite.offset = { 0, -11 }

  player.ball = {
    position = {
      local_pos = {
        x = 8,
        y = -8
      }
    },

    painter = {
      active = true,
      layer = Layer.FgObjects,
    },

    sprite = {
      spritesheet = Resources.res.ball,
      current_animation = { to = 3, fps = 11, loop = true },
    },
  }

  return player
end

function player.Entity.spawn(pos: Vec2): (boolean, GenIdx, *player.Entity)
  local ok, id, player = player.storage:push(player.Entity.init(pos))
  player.entity_data.id = id
  return ok, id, player
end

function player.Entity:hit_ball()
  self.ball.sprite.animation_running = true
  self.ball.sprite.current_frame = 1
  Resources.res.sfx_sounds_impact1:play()
end

function player.Entity:is_beyond_limits(): boolean
  local px = self.position:final_pos().x
  if px < MIN_X then
    return true
  elseif px > MAX_X then
    return true
  end

  return false
end

-- player mov system
local player.MovementSystem = @record{}

local player.MovementSystem.Filter = @record{
  player_comp: *player.Component,
  position: *Position,
  sprite: *Sprite,
  velocity: *Velocity,
}

function player.MovementSystem:run(c: player.MovementSystem.Filter, player_entity: *player.Entity)
  local nene = Nene.instance()

  if player_entity.ball.sprite.current_frame == 0 then
    player_entity.ball.sprite.animation_running = false
  end

  local is_left_held = nene:get_scancode(Nene.Scancode.Left)
  local is_right_held = nene:get_scancode(Nene.Scancode.Right)
  local is_flip_pressed = nene:get_scancode_down(Nene.Scancode.Space)

  local is_on_movement = is_left_held or is_right_held

  if is_left_held then
    c.velocity.final_velocity = { x = -c.player_comp.mov_speed }
  elseif is_right_held then
    c.velocity.final_velocity = { x = c.player_comp.mov_speed }
  else
    c.velocity.final_velocity = { x = 0 }
  end

  if is_flip_pressed then
    player_entity:flip()
  end

  local px = c.position:final_pos().x

  if player_entity:is_beyond_limits() then
    if px < MIN_X and c.velocity.final_velocity.x < 0 or px > MAX_X and c.velocity.final_velocity.x > 0 then
      c.velocity.final_velocity = { x = 0 }
    end
    c.sprite:set_animation(idle_animation, nene.current_time)
  else
    c.sprite:set_animation(is_on_movement and run_animation or idle_animation, nene.current_time)
  end
end

return player
