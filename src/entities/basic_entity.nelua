-- nene
local Vec2 = require 'nene.math.vec2'
local Rect = require 'nene.math.rect'

-- rotor
local entity = require 'rotor.entity'
local GenIdx = require 'rotor.gen_idx'
local rotor_concepts = require 'rotor.concepts'

-- irene
local EntityData = require 'irene.components.entity_data'
local Position = require 'irene.components.position'
local Collider = require 'irene.components.collider'
local EntitiesRemoved = require 'irene.managers.entities_removed'

-- game
local EntityMask = require 'entities.mask'

-- basic entity
local BasicEntity: type <nickname 'BasicEntity'> = @entity(record{
  entity_data: EntityData,
  position: Position,
  collider: Collider,
})
local a_basic_entity_ptr = #[rotor_concepts.value.an_entity_ptr_with({EntityData.value, Position.value, Collider.value})]#

local BasicEntity.Inputs = @record{
  entity_data: record{
    mask: EntityMask,
  },
  position: record{
    local_pos: Vec2,
  },
  collider: record{
    hitbox: Rect,
    intersection_mask: EntityMask,
    on_begin_intersection: Collider.CollisionCallback,
  },
}

function BasicEntity.derived_init(basic_entity: a_basic_entity_ptr, inputs: BasicEntity.Inputs)
  basic_entity.entity_data = {
    mask = inputs.entity_data.mask,
  }

  basic_entity.position = {
    local_pos = inputs.position.local_pos,
  }

  basic_entity.collider = {
    active = true,
    hitbox = inputs.collider.hitbox,
    intersection_mask = inputs.collider.intersection_mask,
    on_begin_intersection = inputs.collider.on_begin_intersection,
  }
end

function BasicEntity.destroy(id: GenIdx, mask: EntityMask, stor: rotor_concepts.an_storage_ptr)
  local ok = stor:remove(id)
  check(ok, "BasicEntity.destroy: Couldn't remove entity from storage")
  if ok then
    EntitiesRemoved.push_removal(id, mask)
  end
end

return BasicEntity
